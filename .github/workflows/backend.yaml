name: backend
on:
  repository_dispatch:
    types: [trigger-workflow]
  workflow_dispatch:
jobs:
  build:
    name: Build & Release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - shell: bash
        env:
          OWNER: ${{ secrets.OWNER }}
          REPO: ${{ secrets.REPO }}
          TOKEN: ${{ secrets.TOKEN }}
        run: |
          git clone "https://farflungai:$TOKEN@github.com/$OWNER/backend.git" tmp
      - shell: bash
        env:
          NOTIFY_ENDPOINT: ${{ secrets.NOTIFY_ENDPOINT }}
        run: |
          cd tmp
          COMMIT_MESSAGE=$(git log --pretty=format:"%s" -n 1)
          BUILD_NAME="v$(date +'%Y-%m-%d::%H:%M:%S')"
          if [[ -z "$COMMIT_MESSAGE" ]]; then
            echo "No commit message found"
          else
            echo "COMMIT_MESSAGE=$COMMIT_MESSAGE" >> $GITHUB_ENV
            echo "BUILD_NAME=$BUILD_NAME" >> $GITHUB_ENV
            curl --location "$NOTIFY_ENDPOINT" \
              --header 'Content-Type: application/json' \
              --data "{ \"message\": \"Backend: $COMMIT_MESSAGE\" }"
          fi
      - run: mv tmp/* .
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Authenticate to Google Cloud
        id: auth
        uses: google-github-actions/auth@v1
        with:
          token_format: access_token
          credentials_json: ${{ secrets.GKE_GITHUB_ACTIONS_SA_KEY }}
      - name: Login to GAR
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.GAR_REGISTRY }}
          username: oauth2accesstoken
          password: ${{ steps.auth.outputs.access_token }}
      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: python-app/
          platforms: linux/amd64
          push: false
          tags: "${{ secrets.GAR_DOCKER_IMAGE }}:latest"
      - name: Setup gcloud
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
      - name: Configure gcloud
        shell: bash
        with:
          GKE_CLUSTER_NAME: ${{ secrets.GKE_CLUSTER_NAME }}
          GCP_REGION: ${{ secrets.GCP_REGION }}
        run: |
          gcloud components install gke-gcloud-auth-plugin
          gcloud container clusters get-credentials $GKE_CLUSTER_NAME --region $GCP_REGION
      - name: Deploy to GKE
        run: |
          kubectl rollout restart deployment backend-python-app-deployment-from-ui
